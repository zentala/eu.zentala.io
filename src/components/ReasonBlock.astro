---
interface Props {
  number: number;
  icon: string;
  title: string;
  paragraphs: string[];
  highlight?: string;
  color?: string;
}

const { number, icon, title, paragraphs, highlight, color = "blue" } = Astro.props;

// Dynamically determine colors based on theme
let bgColorClass = "bg-white/80 dark:bg-blue-950/30";
let borderColorClass = "border-gray-200 dark:border-blue-800/30";
let hoverBorderColorClass = "hover:border-gray-300 dark:hover:border-blue-700/50";
let textColorClass = "text-gray-700 dark:text-gray-300";
let titleColorClass = "text-gray-900 dark:text-white";
let highlightColorClass = "text-blue-600 dark:text-blue-400";
let highlightBgColorClass = "bg-blue-50 dark:bg-blue-900/30";
let highlightBorderColorClass = "border-blue-200 dark:border-blue-500";
let numberBgClass = "from-blue-500 to-blue-600 dark:from-blue-600 dark:to-blue-800";

if (color === "blue") {
  bgColorClass = "bg-white/80 dark:bg-blue-950/30";
  borderColorClass = "border-gray-200 dark:border-blue-800/30";
  hoverBorderColorClass = "hover:border-gray-300 dark:hover:border-blue-700/50";
  highlightColorClass = "text-blue-600 dark:text-blue-400";
  highlightBgColorClass = "bg-blue-50 dark:bg-blue-900/30";
  highlightBorderColorClass = "border-blue-200 dark:border-blue-500";
  numberBgClass = "from-blue-500 to-blue-600 dark:from-blue-600 dark:to-blue-800";
} else if (color === "indigo") {
  bgColorClass = "bg-white/80 dark:bg-indigo-950/30";
  borderColorClass = "border-gray-200 dark:border-indigo-800/30";
  hoverBorderColorClass = "hover:border-gray-300 dark:hover:border-indigo-700/50";
  highlightColorClass = "text-indigo-600 dark:text-indigo-400";
  highlightBgColorClass = "bg-indigo-50 dark:bg-indigo-900/30";
  highlightBorderColorClass = "border-indigo-200 dark:border-indigo-500";
  numberBgClass = "from-indigo-500 to-indigo-600 dark:from-indigo-600 dark:to-indigo-800";
} else if (color === "teal") {
  bgColorClass = "bg-white/80 dark:bg-teal-950/30";
  borderColorClass = "border-gray-200 dark:border-teal-800/30";
  hoverBorderColorClass = "hover:border-gray-300 dark:hover:border-teal-700/50";
  highlightColorClass = "text-teal-600 dark:text-teal-400";
  highlightBgColorClass = "bg-teal-50 dark:bg-teal-900/30";
  highlightBorderColorClass = "border-teal-200 dark:border-teal-500";
  numberBgClass = "from-teal-500 to-teal-600 dark:from-teal-600 dark:to-teal-800";
}
---

<div class="mb-12 md:mb-16 flex flex-col md:flex-row gap-4 md:gap-8 relative">
  <div class="flex-shrink-0 flex items-start">
    <div class={`w-12 h-12 rounded-full bg-gradient-to-br ${numberBgClass} flex items-center justify-center text-2xl font-bold text-white shadow-lg z-10`}>{number}</div>
  </div>
  <div class={`flex-grow ${bgColorClass} backdrop-blur-sm rounded-xl p-6 border ${borderColorClass} ${hoverBorderColorClass} transition-all shadow-md`}>
    <h3 class={`text-2xl font-bold ${titleColorClass} mb-4 flex items-center`}>
      <span class="mr-3 text-2xl">{icon}</span>
      {title}
    </h3>
    {paragraphs.map((paragraph) => (
      <p class={`${textColorClass} mb-4 leading-relaxed`}>
        {paragraph}
      </p>
    ))}
    {highlight && (
      <div class={`${highlightBgColorClass} p-4 rounded-lg border-l-4 ${highlightBorderColorClass}`}>
        <p class={`${textColorClass} leading-relaxed`}>
          <span class={`${highlightColorClass} font-semibold`}>{highlight}</span>
        </p>
      </div>
    )}
  </div>
</div> 