---
// Button.astro - A reusable button component with support for variants, sizes, and icons

interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'link';
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  fullWidth?: boolean;
  disabled?: boolean;
  id?: string;
  class?: string;
  ariaLabel?: string;
}

const {
  variant = 'primary',
  size = 'md',
  href,
  type = 'button',
  fullWidth = false,
  disabled = false,
  id,
  class: className = '',
  ariaLabel,
} = Astro.props;

// Base classes for all buttons
let classes = "inline-flex items-center justify-center rounded font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors";

// Size variations
const sizeClasses = {
  xs: "text-xs px-2.5 py-1.5",
  sm: "text-sm px-3 py-2",
  md: "text-base px-4 py-2",
  lg: "text-lg px-5 py-2.5",
  xl: "text-xl px-6 py-3",
};

// Variant variations (with theme variables)
const variantClasses = {
  primary: "bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500",
  secondary: "bg-indigo-500 hover:bg-indigo-600 text-white focus:ring-indigo-400",
  outline: "border border-blue-600 text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900 focus:ring-blue-500 dark:text-blue-400 dark:border-blue-400",
  ghost: "text-blue-600 hover:bg-blue-50 dark:text-blue-400 dark:hover:bg-gray-800 focus:ring-blue-500",
  link: "text-blue-600 hover:underline dark:text-blue-400 focus:ring-blue-500 p-0",
};

// Combine the classes
classes = `${classes} ${sizeClasses[size]} ${variantClasses[variant]} ${fullWidth ? 'w-full' : ''} ${className}`;

// Determine the element type (button or anchor)
const Element = href ? 'a' : 'button';
---

<Element
  {href}
  type={Element === 'button' ? type : undefined}
  class={classes}
  disabled={disabled}
  id={id}
  aria-label={ariaLabel}
>
  <slot />
</Element>