---
interface Props {
  placeholder?: string;
  buttonText?: string;
}

const { 
  placeholder = "Search the EU Digital Reform Vision...",
  buttonText = "Search"
} = Astro.props;
---

<div class="algolia-search-wrapper relative">
  <div class="search-container bg-gray-800/50 border border-gray-700 rounded-lg shadow-lg">
    <div class="relative w-full">
      <input 
        type="text" 
        id="algolia-search-input"
        class="search-input w-full bg-gray-800 border-0 rounded-lg py-3 pl-10 pr-4 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
        placeholder={placeholder}
        aria-label="Search"
      />
      <div class="absolute inset-y-0 left-0 flex items-center pl-3">
        <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
    </div>
    
    <!-- Search Results Container (hidden by default) -->
    <div id="algolia-search-results" class="search-results hidden">
      <!-- Loading indicator -->
      <div id="search-loading" class="p-4 text-center hidden">
        <div class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"></div>
        <span class="ml-2 text-gray-300">Searching...</span>
      </div>
      
      <!-- Results list -->
      <div id="search-results-list" class="max-h-96 overflow-y-auto"></div>
      
      <!-- No results message -->
      <div id="search-no-results" class="p-4 text-center hidden">
        <p class="text-gray-400">No results found</p>
      </div>
      
      <!-- Footer with Algolia attribution -->
      <div class="search-footer p-3 border-t border-gray-700 flex justify-between items-center">
        <span class="text-xs text-gray-400">
          Results by <a href="https://www.algolia.com/" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:underline">Algolia</a>
        </span>
        <button id="close-search-btn" class="text-xs text-gray-400 hover:text-white">
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .algolia-search-wrapper {
    position: relative;
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
  }
  
  .search-container {
    position: relative;
    width: 100%;
  }
  
  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    margin-top: 0.5rem;
    background-color: rgba(31, 41, 55, 0.95);
    backdrop-filter: blur(8px);
    border: 1px solid rgba(75, 85, 99, 0.5);
    border-radius: 0.5rem;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -4px rgba(0, 0, 0, 0.3);
    z-index: 50;
  }
  
  .search-result-item {
    padding: 1rem;
    border-bottom: 1px solid rgba(75, 85, 99, 0.2);
    transition: background-color 0.15s ease;
  }
  
  .search-result-item:hover {
    background-color: rgba(55, 65, 81, 0.7);
  }
  
  .search-result-item:last-child {
    border-bottom: none;
  }
  
  .search-result-title {
    color: white;
    font-weight: 600;
    margin-bottom: 0.25rem;
  }
  
  .search-result-description {
    color: rgba(209, 213, 219, 0.8);
    font-size: 0.875rem;
    margin-bottom: 0.5rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .search-result-path {
    color: rgba(147, 197, 253, 0.8);
    font-size: 0.75rem;
  }
  
  .search-highlight {
    background-color: rgba(59, 130, 246, 0.2);
    color: rgba(191, 219, 254, 1);
    padding: 0 0.2rem;
    border-radius: 0.2rem;
    font-weight: 500;
  }
</style>

<script>
  import { searchClient, searchIndex } from '../lib/algoliaClient.js';
  
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('algolia-search-input');
    const searchResults = document.getElementById('algolia-search-results');
    const searchResultsList = document.getElementById('search-results-list');
    const searchLoading = document.getElementById('search-loading');
    const searchNoResults = document.getElementById('search-no-results');
    const closeSearchBtn = document.getElementById('close-search-btn');
    
    if (!searchInput || !searchResults || !searchResultsList || !searchLoading || !searchNoResults || !closeSearchBtn) {
      console.error('Search elements not found');
      return;
    }
    
    // FIXME: Algolia API has changed, this needs to be updated
// const index = searchClient.initIndex(searchIndex);
const index = { 
  search: async (query: string, options: any) => ({ hits: [] }) 
};
    let searchTimeout: ReturnType<typeof setTimeout> | null = null;
    
    const highlightMatch = (text: string, query: string): string => {
      if (!query.trim()) return text;
      
      try {
        const regex = new RegExp(`(${query.trim().replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
        return text.replace(regex, '<span class="search-highlight">$1</span>');
      } catch (e) {
        return text;
      }
    };
    
    const displayResults = (results: any[], query: string) => {
      searchResultsList.innerHTML = '';
      
      if (results.length === 0) {
        searchNoResults.classList.remove('hidden');
        return;
      }
      
      searchNoResults.classList.add('hidden');
      
      results.forEach(hit => {
        const resultItem = document.createElement('div');
        resultItem.className = 'search-result-item';
        
        const title = highlightMatch(hit.title || 'Untitled', query);
        const description = hit.description 
          ? highlightMatch(hit.description, query)
          : hit.excerpt 
            ? highlightMatch(hit.excerpt, query)
            : '';
        
        resultItem.innerHTML = `
          <a href="${hit.slug}" class="block">
            <div class="search-result-title">${title}</div>
            ${description ? `<div class="search-result-description">${description}</div>` : ''}
            <div class="search-result-path">${hit.slug}</div>
          </a>
        `;
        
        searchResultsList.appendChild(resultItem);
      });
    };
    
    const performSearch = async (query: string) => {
      if (!query.trim()) {
        searchResults.classList.add('hidden');
        return;
      }
      
      searchResults.classList.remove('hidden');
      searchResultsList.innerHTML = '';
      searchLoading.classList.remove('hidden');
      searchNoResults.classList.add('hidden');
      
      try {
        const { hits } = await index.search(query, {
          attributesToRetrieve: ['title', 'description', 'excerpt', 'slug'],
          hitsPerPage: 10
        });
        
        searchLoading.classList.add('hidden');
        displayResults(hits, query);
      } catch (error) {
        console.error('Error searching:', error);
        searchLoading.classList.add('hidden');
        searchNoResults.classList.remove('hidden');
      }
    };
    
    // Event listeners
    searchInput.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      const query = target.value.trim();
      
      if (searchTimeout) {
        clearTimeout(searchTimeout);
      }
      
      if (!query) {
        searchResults.classList.add('hidden');
        return;
      }
      
      searchTimeout = setTimeout(() => {
        performSearch(query);
      }, 300);
    });
    
    // Handle Enter key to navigate to search page
    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        const query = (e.target as HTMLInputElement).value.trim();
        if (query) {
          window.location.href = `/search?q=${encodeURIComponent(query)}`;
        }
      }
    });
    
    searchInput.addEventListener('focus', () => {
      const query = (searchInput as HTMLInputElement).value.trim();
      if (query) {
        searchResults.classList.remove('hidden');
      }
    });
    
    // Close when clicking outside
    document.addEventListener('click', (e) => {
      if (e.target instanceof Node && 
          !searchInput.contains(e.target) && 
          !searchResults.contains(e.target)) {
        searchResults.classList.add('hidden');
      }
    });
    
    // Close button
    closeSearchBtn.addEventListener('click', () => {
      searchResults.classList.add('hidden');
    });
    
    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        searchResults.classList.add('hidden');
      }
    });
  });
</script>