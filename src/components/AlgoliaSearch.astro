---
interface Props {
  placeholder?: string;
  buttonText?: string;
}

const { 
  placeholder = "Search the EU Digital Reform Vision...",
  buttonText = "Search"
} = Astro.props;
---

<div class="algolia-search-wrapper relative">
  <div class="search-container border rounded-lg shadow-lg" style={{
    backgroundColor: "var(--color-bg-secondary)",
    borderColor: "var(--color-border)",
  }}>
    <div class="relative w-full">
      <input 
        type="text" 
        id="algolia-search-input"
        class="search-input w-full border-0 rounded-lg py-3 pl-10 pr-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
        style={{
          backgroundColor: "var(--color-bg-secondary)",
          color: "var(--color-text-primary)",
        }}
        placeholder={placeholder}
        aria-label="Search"
      />
      <div class="absolute inset-y-0 left-0 flex items-center pl-3">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" style={{
          color: "var(--color-text-secondary)"
        }}>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
    </div>
    
    <!-- Search Results Container (hidden by default) -->
    <div id="algolia-search-results" class="search-results hidden">
      <!-- Loading indicator -->
      <div id="search-loading" class="p-4 text-center hidden">
        <div class="inline-block animate-spin rounded-full h-4 w-4 border-b-2" style="border-color: var(--color-accent-primary);"></div>
        <span class="ml-2" style="color: var(--color-text-secondary);">Searching...</span>
      </div>
      
      <!-- Results list -->
      <div id="search-results-list" class="max-h-96 overflow-y-auto"></div>
      
      <!-- No results message -->
      <div id="search-no-results" class="p-4 text-center hidden">
        <p style="color: var(--color-text-secondary);">No results found</p>
      </div>
      
      <!-- Footer with Algolia attribution -->
      <div class="search-footer p-3 flex justify-between items-center" style="border-top: 1px solid var(--color-border);">
        <span class="text-xs" style="color: var(--color-text-secondary);">
          Results by <a href="https://www.algolia.com/" target="_blank" rel="noopener noreferrer" style="color: var(--color-accent-primary);" class="hover:underline">Algolia</a>
        </span>
        <button id="close-search-btn" class="text-xs hover:underline" style="color: var(--color-text-secondary);">
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .algolia-search-wrapper {
    position: relative;
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
  }
  
  .search-container {
    position: relative;
    width: 100%;
  }
  
  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    margin-top: 0.5rem;
    background-color: var(--color-bg-secondary);
    backdrop-filter: blur(8px);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -4px rgba(0, 0, 0, 0.3);
    z-index: 50;
    transition: background-color 0.3s, border-color 0.3s;
  }
  
  .search-result-item {
    padding: 1rem;
    border-bottom: 1px solid var(--color-border);
    transition: background-color 0.15s ease;
  }
  
  .search-result-item:hover {
    background-color: color-mix(in srgb, var(--color-bg-secondary) 90%, white 10%);
  }
  
  .dark .search-result-item:hover {
    background-color: color-mix(in srgb, var(--color-bg-secondary) 80%, black 20%);
  }
  
  .search-result-item:last-child {
    border-bottom: none;
  }
  
  .search-result-title {
    color: var(--color-text-primary);
    font-weight: 600;
    margin-bottom: 0.25rem;
  }
  
  .search-result-description {
    color: var(--color-text-secondary);
    font-size: 0.875rem;
    margin-bottom: 0.5rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .search-result-path {
    color: var(--color-accent-primary);
    font-size: 0.75rem;
  }
  
  .search-highlight {
    background-color: rgba(59, 130, 246, 0.2);
    color: var(--color-accent-primary);
    padding: 0 0.2rem;
    border-radius: 0.2rem;
    font-weight: 500;
  }
  
  .dark .search-highlight {
    background-color: rgba(59, 130, 246, 0.3);
    color: rgba(191, 219, 254, 1);
  }
</style>

<script>
  // @ts-ignore
  import { searchClient, searchIndex } from '../lib/algoliaClient.ts';
  
  document.addEventListener('DOMContentLoaded', () => {
    console.log('AlgoliaSearch component initializing...');
    console.log('searchClient type:', typeof searchClient);
    console.log('searchClient methods:', searchClient ? Object.keys(searchClient) : 'none');
    console.log('searchIndex:', searchIndex);
    
    const searchInput = document.getElementById('algolia-search-input') as HTMLInputElement;
    const searchResults = document.getElementById('algolia-search-results');
    const searchResultsList = document.getElementById('search-results-list');
    const searchLoading = document.getElementById('search-loading');
    const searchNoResults = document.getElementById('search-no-results');
    const closeSearchBtn = document.getElementById('close-search-btn');
    
    if (!searchInput || !searchResults || !searchResultsList || !searchLoading || !searchNoResults || !closeSearchBtn) {
      console.error('Search elements not found');
      return;
    }
    
    // Initialize search index with any type
    const index = {
      search: async (query: string, options?: any): Promise<{ hits: any[] }> => {
        console.log('Searching for:', query, options);
        
        try {
          if (searchClient && typeof searchClient.search === 'function') {
            // Use the client's search method with any type
            const results: any = await searchClient.search([
              {
                indexName: searchIndex,
                query,
                params: options
              }
            ]);
            
            console.log('Search results:', results);
            
            // Extract hits from results
            const hits = results.results?.[0]?.hits || [];
            return { hits };
          } else {
            console.warn('No valid search client available');
            return { hits: [] };
          }
        } catch (error) {
          console.error('Error searching:', error);
          return { hits: [] };
        }
      }
    };
    
    let searchTimeout: ReturnType<typeof setTimeout> | null = null;
    
    const highlightMatch = (text: string | undefined, query: string): string => {
      if (!text || !query || !query.trim()) return text || '';
      
      try {
        const regex = new RegExp(`(${query.trim().replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
        return text.replace(regex, '<span class="search-highlight">$1</span>');
      } catch (e) {
        console.warn('Error highlighting match:', e);
        return text;
      }
    };
    
    const displayResults = (results: any[] | null, query: string): void => {
      searchResultsList.innerHTML = '';
      
      if (!results || results.length === 0) {
        searchNoResults.classList.remove('hidden');
        return;
      }
      
      searchNoResults.classList.add('hidden');
      
      results.forEach(hit => {
        const resultItem = document.createElement('div');
        resultItem.className = 'search-result-item';
        
        const title = highlightMatch(hit.title || 'Untitled', query);
        const description = hit.description 
          ? highlightMatch(hit.description, query)
          : hit.excerpt 
            ? highlightMatch(hit.excerpt, query)
            : '';
        
        resultItem.innerHTML = `
          <a href="${hit.slug || '#'}" class="block">
            <div class="search-result-title">${title}</div>
            ${description ? `<div class="search-result-description">${description}</div>` : ''}
            <div class="search-result-path">${hit.slug || ''}</div>
          </a>
        `;
        
        searchResultsList.appendChild(resultItem);
      });
    };
    
    const performSearch = async (query: string): Promise<void> => {
      if (!query || !query.trim()) {
        searchResults.classList.add('hidden');
        return;
      }
      
      searchResults.classList.remove('hidden');
      searchResultsList.innerHTML = '';
      searchLoading.classList.remove('hidden');
      searchNoResults.classList.add('hidden');
      
      try {
        console.log('Performing search for:', query);
        
        const { hits } = await index.search(query, {
          attributesToRetrieve: ['title', 'description', 'excerpt', 'slug'],
          hitsPerPage: 10
        });
        
        console.log('Search results:', hits.length);
        searchLoading.classList.add('hidden');
        displayResults(hits, query);
      } catch (error) {
        console.error('Error searching:', error);
        searchLoading.classList.add('hidden');
        searchNoResults.classList.remove('hidden');
      }
    };
    
    // Event listeners
    searchInput.addEventListener('input', (e: Event) => {
      const target = e.target as HTMLInputElement;
      const query = target.value.trim();
      
      if (searchTimeout) {
        clearTimeout(searchTimeout);
      }
      
      searchTimeout = setTimeout(() => {
        performSearch(query);
      }, 300);
    });
    
    closeSearchBtn.addEventListener('click', () => {
      searchResults.classList.add('hidden');
      searchInput.value = '';
    });
    
    // Close search results when clicking outside
    document.addEventListener('click', (e: MouseEvent) => {
      const searchContainer = document.querySelector('.algolia-search-wrapper') as HTMLElement;
      if (searchContainer && !searchContainer.contains(e.target as Node)) {
        searchResults.classList.add('hidden');
      }
    });
    
    // Close search results when pressing Escape
    document.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        searchResults.classList.add('hidden');
      }
    });
    
    console.log('AlgoliaSearch component initialized');
  });
</script>