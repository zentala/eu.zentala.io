---
type CardColor = 'gray' | 'blue' | 'green' | 'red' | 'yellow' | 'indigo' | 'purple' | 'teal';

interface Props {
	icon?: string;
	title: string;
	color?: CardColor;
}

const { icon, title, color } = Astro.props;

// Color definitions for dark mode (original colors)
const darkModeColors: Record<CardColor, { bg: string, hover: string, border: string }> = {
  "gray": {
    bg: "bg-gray-800",
    hover: "hover:bg-gray-700",
    border: "border-gray-700"
  },
  "blue": {
    bg: "bg-blue-900",
    hover: "hover:bg-blue-800",
    border: "border-blue-700"
  },
  "green": {
    bg: "bg-green-900",
    hover: "hover:bg-green-800",
    border: "border-green-700"
  },
  "red": {
    bg: "bg-red-900",
    hover: "hover:bg-red-800",
    border: "border-red-700"
  },
  "yellow": {
    bg: "bg-yellow-900",
    hover: "hover:bg-yellow-800",
    border: "border-yellow-700"
  },
  "indigo": {
    bg: "bg-indigo-900",
    hover: "hover:bg-indigo-800",
    border: "border-indigo-700"
  },
  "purple": {
    bg: "bg-purple-900",
    hover: "hover:bg-purple-800",
    border: "border-purple-700"
  },
  "teal": {
    bg: "bg-teal-900",
    hover: "hover:bg-teal-800",
    border: "border-teal-700"
  }
};

// Color definitions for light mode
const lightModeColors: Record<CardColor, { bg: string, hover: string, border: string, text: string }> = {
  "gray": {
    bg: "bg-gray-100",
    hover: "hover:bg-gray-200",
    border: "border-gray-300",
    text: "text-gray-800"
  },
  "blue": {
    bg: "bg-blue-100",
    hover: "hover:bg-blue-200",
    border: "border-blue-300",
    text: "text-blue-900"
  },
  "green": {
    bg: "bg-green-100",
    hover: "hover:bg-green-200",
    border: "border-green-300",
    text: "text-green-900"
  },
  "red": {
    bg: "bg-red-100",
    hover: "hover:bg-red-200",
    border: "border-red-300",
    text: "text-red-900"
  },
  "yellow": {
    bg: "bg-yellow-100",
    hover: "hover:bg-yellow-200",
    border: "border-yellow-300",
    text: "text-yellow-900"
  },
  "indigo": {
    bg: "bg-indigo-100",
    hover: "hover:bg-indigo-200",
    border: "border-indigo-300",
    text: "text-indigo-900"
  },
  "purple": {
    bg: "bg-purple-100",
    hover: "hover:bg-purple-200",
    border: "border-purple-300",
    text: "text-purple-900"
  },
  "teal": {
    bg: "bg-teal-100",
    hover: "hover:bg-teal-200",
    border: "border-teal-300",
    text: "text-teal-900"
  }
};

// Get color classes based on provided color
const selectedColor = color || "gray";
// No need for fallbacks since we have defined the type
const darkColors = darkModeColors[selectedColor];
const lightColors = lightModeColors[selectedColor];
---

<article class="card flex flex-col gap-4 m-4 p-8 border rounded-xl shadow-lg transition-all duration-300 hover:shadow-xl transform hover:scale-[1.02] h-full"
  data-color={selectedColor}>
	<h3 class="title flex font-bold text-2xl leading-snug gap-4 items-center mb-4">
		{icon && <span class="text-3xl">{icon}</span>}
		<span set:html={title} />
	</h3>
	<div class="body text-lg">
		<slot />
	</div>
</article>

<style define:vars={{
  selectedColor: selectedColor
}}>
  /* Base card styles with transitions */
  .card {
    transition: background-color 0.3s, color 0.3s, border-color 0.3s, box-shadow 0.3s, transform 0.3s;
  }
  
  /* Apply appropriate color in dark mode (default) */
  .card[data-color="gray"] {
    @apply bg-gray-800 hover:bg-gray-700 border-gray-700 text-white;
  }
  .card[data-color="blue"] {
    @apply bg-blue-900 hover:bg-blue-800 border-blue-700 text-white;
  }
  .card[data-color="green"] {
    @apply bg-green-900 hover:bg-green-800 border-green-700 text-white;
  }
  .card[data-color="red"] {
    @apply bg-red-900 hover:bg-red-800 border-red-700 text-white;
  }
  .card[data-color="yellow"] {
    @apply bg-yellow-900 hover:bg-yellow-800 border-yellow-700 text-white;
  }
  .card[data-color="indigo"] {
    @apply bg-indigo-900 hover:bg-indigo-800 border-indigo-700 text-white;
  }
  .card[data-color="purple"] {
    @apply bg-purple-900 hover:bg-purple-800 border-purple-700 text-white;
  }
  .card[data-color="teal"] {
    @apply bg-teal-900 hover:bg-teal-800 border-teal-700 text-white;
  }
  
  /* Text color in dark mode */
  .card .body {
    @apply text-gray-300;
  }
  
  /* Apply light mode colors when not in dark mode */
  :root:not(.dark) .card[data-color="gray"] {
    @apply bg-gray-100 hover:bg-gray-200 border-gray-300 text-gray-800;
  }
  :root:not(.dark) .card[data-color="blue"] {
    @apply bg-blue-100 hover:bg-blue-200 border-blue-300 text-blue-800;
  }
  :root:not(.dark) .card[data-color="green"] {
    @apply bg-green-100 hover:bg-green-200 border-green-300 text-green-800;
  }
  :root:not(.dark) .card[data-color="red"] {
    @apply bg-red-100 hover:bg-red-200 border-red-300 text-red-800;
  }
  :root:not(.dark) .card[data-color="yellow"] {
    @apply bg-yellow-100 hover:bg-yellow-200 border-yellow-300 text-yellow-800;
  }
  :root:not(.dark) .card[data-color="indigo"] {
    @apply bg-indigo-100 hover:bg-indigo-200 border-indigo-300 text-indigo-800;
  }
  :root:not(.dark) .card[data-color="purple"] {
    @apply bg-purple-100 hover:bg-purple-200 border-purple-300 text-purple-800;
  }
  :root:not(.dark) .card[data-color="teal"] {
    @apply bg-teal-100 hover:bg-teal-200 border-teal-300 text-teal-800;
  }
  
  /* Text color in light mode */
  :root:not(.dark) .card .body {
    @apply text-gray-700;
  }
</style>
