---
// ThemeToggle.astro - A reusable component for toggling between light and dark themes
---

<button 
  id="theme-toggle" 
  aria-label="Toggle theme"
  class="flex items-center justify-center p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
>
  <!-- Sun icon (for dark mode) -->
  <svg 
    xmlns="http://www.w3.org/2000/svg" 
    class="h-5 w-5 text-gray-900 dark:text-yellow-300 dark:block hidden" 
    fill="none" 
    viewBox="0 0 24 24" 
    stroke="currentColor"
  >
    <path 
      stroke-linecap="round" 
      stroke-linejoin="round" 
      stroke-width="2" 
      d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" 
    />
  </svg>
  
  <!-- Moon icon (for light mode) -->
  <svg 
    xmlns="http://www.w3.org/2000/svg" 
    class="h-5 w-5 text-gray-700 dark:text-gray-400 dark:hidden block" 
    fill="none" 
    viewBox="0 0 24 24" 
    stroke="currentColor"
  >
    <path 
      stroke-linecap="round" 
      stroke-linejoin="round" 
      stroke-width="2" 
      d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" 
    />
  </svg>
</button>

<script>
  // Client-side script to handle theme toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const themeToggle = document.getElementById('theme-toggle');
    
    if (themeToggle) {
      themeToggle.addEventListener('click', () => {
        // Toggle the dark class on the document element
        const isDark = document.documentElement.classList.toggle('dark');
        
        // Save the theme preference using the global themeUtils or fallback methods
        try {
          // Use type assertion to access themeUtils on window
          const windowWithThemeUtils = window as any;
          if (typeof windowWithThemeUtils.themeUtils?.setTheme === 'function') {
            windowWithThemeUtils.themeUtils.setTheme(isDark ? 'dark' : 'light');
          } else {
            // Try cookies as fallback
            try {
              // Set cookie with 30-day expiration
              const expirationDate = new Date();
              expirationDate.setDate(expirationDate.getDate() + 30);
              document.cookie = `theme=${isDark ? 'dark' : 'light'};expires=${expirationDate.toUTCString()};path=/;SameSite=Lax`;
            } catch (cookieError) {
              console.warn('Error setting theme cookie:', cookieError);
              
              // Try localStorage as last resort
              try {
                if (typeof localStorage !== 'undefined') {
                  localStorage.setItem('theme', isDark ? 'dark' : 'light');
                }
              } catch (e) {
                console.warn('Error saving theme preference to localStorage:', e);
              }
            }
          }
        } catch (e) {
          console.warn('Error saving theme preference:', e);
        }
      });
    }
  });
</script>