---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  const allDocs = await getCollection('docs');
  const uniqueTags = new Set<string>();
  
  // Extract all unique tags
  allDocs.forEach(doc => {
    if (doc.data.tags) {
      const tagList = doc.data.tags.split(',').map(tag => tag.trim());
      tagList.forEach(tag => {
        if (tag) {
          uniqueTags.add(tag);
        }
      });
    }
  });
  
  // Create a path for each tag
  return Array.from(uniqueTags).map((tag: string) => {
    // Find all documents with this tag
    const filteredDocs = allDocs.filter(doc => {
      if (!doc.data.tags) return false;
      
      const docTags = doc.data.tags.split(',').map(t => t.trim());
      return docTags.includes(tag);
    });
    
    // Create a path parameter from the tag
    const tagSlug = tag.toLowerCase().replace(/\s+/g, '-');
    
    return {
      params: { tag: tagSlug },
      props: { 
        tag, 
        tagSlug,
        documents: filteredDocs 
      }
    };
  });
}

const { tag, tagSlug, documents } = Astro.props;
---

<Layout title={`${tag} - Content Tag`}>
  <main class="container mx-auto max-w-4xl px-4 py-12">
    <div class="mb-8">
      <a href="/tags" class="text-blue-400 hover:text-blue-300 flex items-center gap-2 mb-4">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Back to All Tags
      </a>
      <h1 class="text-4xl font-bold text-white mb-2">Tag: {tag}</h1>
      <p class="text-xl text-gray-300">
        {documents.length} article{documents.length !== 1 ? 's' : ''} tagged with "{tag}"
      </p>
    </div>
    
    <div class="space-y-8">
      {documents.map(doc => (
        <div class="bg-gray-800 rounded-lg p-6 hover:bg-gray-700 transition-colors">
          <h2 class="text-2xl font-bold text-white mb-2">
            <a href={`/docs/${doc.slug}`} class="hover:text-blue-300">{doc.data.title}</a>
          </h2>
          {doc.data.description && (
            <p class="text-gray-400 mb-4">{doc.data.description}</p>
          )}
          <div class="flex flex-wrap gap-2">
            {doc.data.tags && doc.data.tags.split(',').map(t => {
              const tagText = t.trim();
              const tagUrl = tagText.toLowerCase().replace(/\s+/g, '-');
              return (
                <a 
                  href={`/tags/${tagUrl}`} 
                  class={`px-3 py-1 text-sm rounded-full ${tagUrl === tagSlug ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}
                >
                  {tagText}
                </a>
              );
            })}
          </div>
        </div>
      ))}
    </div>
    
    {documents.length === 0 && (
      <div class="bg-gray-800 rounded-lg p-8 text-center">
        <p class="text-gray-400 mb-4">No articles found with this tag.</p>
        <p class="text-gray-500">The tag might have been removed or renamed.</p>
      </div>
    )}
  </main>
</Layout>