---
import { getCollection, getEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import DisplayTitle from '../../components/DisplayTitle.astro';

export async function getStaticPaths() {
  const summaryEntries = await getCollection('summaries', ({ data }) => {
    return !data.draft;
  });
  
  return summaryEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Format source date if available
let formattedSourceDate = '';
if (entry.data.sourceDate) {
  try {
    const date = new Date(entry.data.sourceDate);
    formattedSourceDate = date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  } catch (e) {
    formattedSourceDate = entry.data.sourceDate;
  }
}

// Format generation/publish date if available
let formattedPublishDate = '';
const dateToUse = entry.data.publishDate || entry.data.generationDate;
if (dateToUse) {
  try {
    const date = new Date(dateToUse);
    formattedPublishDate = date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  } catch (e) {
    formattedPublishDate = dateToUse;
  }
}

// Extract YouTube video ID if present
const youtubeId = entry.data.sourceId || 
  (entry.data.sourceType === 'youtube' && entry.data.sourceUrl?.includes('youtube.com/watch?v=') 
    ? entry.data.sourceUrl.split('v=')[1]?.split('&')[0] 
    : null);

// Prepare key points if available
const keyPoints = entry.data.keyPoints || [];
---

<Layout title={entry.data.title}>
  <main class="container mx-auto max-w-5xl px-4 py-8">
    <!-- Back link -->
    <a href="/summaries" class="text-blue-400 hover:text-blue-300 flex items-center gap-2 mb-6">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
      </svg>
      Back to Summaries
    </a>
    
    <!-- Main content area -->
    <div class="mb-8">
      <!-- Source type badge -->
      <div class="mb-4 flex items-center flex-wrap">
        <span class={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
          entry.data.sourceType === 'youtube' ? 'bg-red-900/30 text-red-400 border border-red-700/30' :
          entry.data.sourceType === 'article' ? 'bg-blue-900/30 text-blue-400 border border-blue-700/30' :
          entry.data.sourceType === 'podcast' ? 'bg-purple-900/30 text-purple-400 border border-purple-700/30' :
          'bg-gray-900/30 text-gray-400 border border-gray-700/30'
        }`}>
          <span class="mr-1.5 flex items-center justify-center">
            {entry.data.sourceType === 'youtube' && 
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                <path d="M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z"/>
              </svg>
            }
            {entry.data.sourceType === 'article' && 
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1M19 20a2 2 0 002-2V8a2 2 0 00-2-2h-5M8 10h4M8 14h4M8 18h4" />
              </svg>
            }
            {entry.data.sourceType === 'podcast' && 
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
              </svg>
            }
          </span>
          <span class="flex items-center">{entry.data.sourceType.charAt(0).toUpperCase() + entry.data.sourceType.slice(1)}</span>
        </span>
        
        {entry.data.language && 
          <span class="ml-2 inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-800 text-gray-300 border border-gray-700">
            {entry.data.language}
          </span>
        }
        
        {entry.data.duration && 
          <span class="ml-2 inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-800 text-gray-300 border border-gray-700">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            {entry.data.duration}
          </span>
        }
      </div>
      
      <DisplayTitle title={entry.data.title} class="mt-5" />
      <p class="text-xl text-gray-300 mb-6">{entry.data.description}</p>
      
      <div class="flex flex-wrap gap-y-2 text-sm mb-6">
        {formattedSourceDate && 
          <p class="text-gray-400 mr-6">
            <span class="text-gray-500">Original content:</span> {formattedSourceDate}
          </p>
        }
        
        {formattedPublishDate && 
          <p class="text-gray-400">
            <span class="text-gray-500">Summary created:</span> {formattedPublishDate}
          </p>
        }
      </div>
    </div>
    
    <div class="flex flex-col lg:flex-row gap-8">
      <div class="w-full lg:w-3/4 order-2 lg:order-1">
        <!-- YouTube Embed if applicable -->
        {entry.data.sourceType === 'youtube' && entry.data.youtubeEmbed && youtubeId && 
          <div class="mb-8 rounded-xl overflow-hidden bg-black aspect-video">
            <iframe 
              src={`https://www.youtube.com/embed/${youtubeId}`}
              title={entry.data.title}
              class="w-full h-full"
              frameborder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowfullscreen>
            </iframe>
          </div>
        }
        
        <!-- Main content -->
        <div class="relative">
          <div class="absolute inset-0 bg-gradient-to-b from-blue-900/10 to-transparent opacity-50 blur-xl"></div>
          <article class="relative prose prose-lg max-w-none dark:prose-invert prose-headings:text-white prose-headings:font-bold prose-p:text-gray-300 prose-a:text-blue-400 prose-a:no-underline hover:prose-a:underline prose-strong:text-white prose-code:text-blue-300 prose-pre:bg-gray-800 prose-pre:text-gray-300 prose-li:text-gray-300 prose-ul:pl-5 prose-ol:pl-5 prose-ul:list-disc prose-ol:list-decimal prose-bullets:text-gray-300">
            <Content />
          </article>
        </div>
      </div>
      
      <div class="w-full lg:w-1/4 order-1 lg:order-2">
        <div class="sticky top-24">
          <!-- Source info card -->
          <div class="bg-gray-800/50 rounded-xl border border-gray-700 p-6 mb-6">
            <h3 class="text-lg font-bold text-white mb-4">Original Source</h3>
            
            {entry.data.sourceType === 'youtube' && youtubeId && !entry.data.coverImage &&
              <div class="w-full aspect-video bg-gray-900 rounded-lg mb-4 overflow-hidden">
                <img 
                  src={`https://img.youtube.com/vi/${youtubeId}/maxresdefault.jpg`} 
                  alt={entry.data.sourceTitle || entry.data.title}
                  class="w-full h-full object-cover"
                />
              </div>
            }
            
            {entry.data.coverImage &&
              <div class="w-full aspect-video bg-gray-900 rounded-lg mb-4 overflow-hidden">
                <img 
                  src={entry.data.coverImage} 
                  alt={entry.data.sourceTitle || entry.data.title}
                  class="w-full h-full object-cover"
                />
              </div>
            }
            
            <div class="mb-4">
              <h4 class="font-medium text-white mb-1">
                {entry.data.sourceTitle || entry.data.title}
                {entry.data.sourceAuthor && 
                  <span class="text-gray-400 text-sm">
                    by {entry.data.sourceAuthorUrl ? 
                      <a href={entry.data.sourceAuthorUrl} target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:text-blue-300">
                        {entry.data.sourceAuthor}
                      </a> : 
                      entry.data.sourceAuthor
                    }
                  </span>
                }
              </h4>
              
            </div>
            
            <div class="flex flex-col sm:flex-row gap-3">
              <a 
                href={entry.data.sourceUrl} 
                target="_blank" 
                rel="noopener noreferrer" 
                class="inline-flex items-center text-blue-400 hover:text-blue-300 text-sm font-medium"
              >
                {entry.data.sourceType === 'youtube' ? 'Watch on YouTube' : 
                 entry.data.sourceType === 'article' ? 'Read original article' : 
                 entry.data.sourceType === 'podcast' ? 'Listen to original podcast' : 
                 'View original source'}
                <svg xmlns="http://www.w3.org/2000/svg" class="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                </svg>
              </a>
              
            </div>
          </div>
          
          <!-- Key points card (if available) -->
          {keyPoints.length > 0 && 
            <div class="bg-blue-900/20 rounded-xl border border-blue-800/30 p-6">
              <h3 class="text-lg font-bold text-white mb-4">Key Points</h3>
              <ul class="space-y-3">
                {keyPoints.map(point => (
                  <li class="flex items-start">
                    <span class="text-blue-400 mr-3 text-xl">•</span>
                    <span class="text-gray-300 flex-1">{point}</span>
                  </li>
                ))}
              </ul>
            </div>
          }
        </div>
      </div>
    </div>
    
    <!-- AI generation disclaimer -->
    <div class="mt-16 text-center">
      <div class="inline-block bg-gray-800/50 rounded-xl border border-gray-700/50 px-8 py-4">
        <p class="text-gray-400 text-sm">
          {entry.data.transcriptOnly 
            ? 'This transcript was automatically generated and may contain errors.'
            : 'This summary was generated by AI based on the original content and may not capture all nuances and details.'
          }
          <br/>
          For complete information, please refer to the original source.
        </p>
      </div>
    </div>
  </main>
</Layout>