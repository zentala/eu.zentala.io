---
import Layout from '../layouts/Layout.astro';
import AlgoliaSearch from '../components/AlgoliaSearch.astro';
---

<Layout title="Search - EU Reform Vision">
  <main class="container mx-auto px-4 py-12 max-w-6xl">
    <h1 class="text-4xl font-bold text-white mb-8 text-center">Search</h1>
    
    <div class="mb-12 max-w-3xl mx-auto">
      <AlgoliaSearch placeholder="Search the entire EU Reform Vision..." />
    </div>
    
    <div id="search-page-results" class="search-results-container mt-8">
      <!-- Results will be loaded here by JavaScript -->
      <div id="initial-message" class="text-center text-gray-400 py-12">
        <p>Enter a search term above to find content across the EU Reform Vision</p>
      </div>
      
      <div id="search-loading" class="text-center text-gray-400 py-12 hidden">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mb-4"></div>
        <p>Searching...</p>
      </div>
      
      <div id="search-results-list" class="space-y-8 hidden"></div>
      
      <div id="search-no-results" class="text-center text-gray-400 py-12 hidden">
        <svg class="w-16 h-16 mx-auto mb-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <p class="text-xl">No results found</p>
        <p class="mt-2">Try different keywords or check your spelling</p>
      </div>
    </div>
  </main>
</Layout>

<style>
  .search-result-item {
    background-color: rgba(30, 41, 59, 0.5);
    border: 1px solid rgba(71, 85, 105, 0.3);
    border-radius: 0.5rem;
    padding: 1.5rem;
    transition: all 0.2s ease;
  }
  
  .search-result-item:hover {
    background-color: rgba(30, 41, 59, 0.7);
    border-color: rgba(71, 85, 105, 0.5);
    transform: translateY(-2px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);
  }
  
  .search-result-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: white;
    margin-bottom: 0.5rem;
  }
  
  .search-result-description {
    color: rgba(209, 213, 219, 1);
    margin-bottom: 1rem;
  }
  
  .search-result-path {
    color: rgba(147, 197, 253, 0.8);
    font-size: 0.875rem;
  }
  
  .search-result-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1rem;
  }
  
  .search-result-tag {
    background-color: rgba(59, 130, 246, 0.2);
    color: rgba(191, 219, 254, 1);
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
  }
  
  .search-highlight {
    background-color: rgba(59, 130, 246, 0.2);
    color: rgba(191, 219, 254, 1);
    padding: 0 0.2rem;
    border-radius: 0.2rem;
    font-weight: 500;
  }
</style>

<script>
  import { searchClient, searchIndex } from '../lib/algoliaClient.js';
  
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('algolia-search-input') as HTMLInputElement;
    const initialMessage = document.getElementById('initial-message');
    const searchLoading = document.getElementById('search-loading');
    const searchResultsList = document.getElementById('search-results-list');
    const searchNoResults = document.getElementById('search-no-results');
    
    if (!searchInput || !initialMessage || !searchLoading || !searchResultsList || !searchNoResults) {
      console.error('Search page elements not found');
      return;
    }
    
    // Ensure TypeScript knows these elements are not null
    const initialMessageEl = initialMessage!;
    const searchLoadingEl = searchLoading!;
    const searchResultsListEl = searchResultsList!;
    const searchNoResultsEl = searchNoResults!;
    
    const index = searchClient.initIndex(searchIndex);
    
    // If URL has search query param, perform search
    const urlParams = new URLSearchParams(window.location.search);
    const queryParam = urlParams.get('q');
    
    if (queryParam) {
      searchInput.value = queryParam;
      performSearch(queryParam);
    }
    
    // Search form submit handler
    const searchForm = document.querySelector('.algolia-search-wrapper');
    if (searchForm) {
      searchForm.addEventListener('keydown', (e) => {
        if ((e as KeyboardEvent).key === 'Enter') {
          e.preventDefault();
          const query = searchInput.value.trim();
          if (query) {
            // Update URL
            const newUrl = new URL(window.location.href);
            newUrl.searchParams.set('q', query);
            window.history.pushState({}, '', newUrl);
            
            performSearch(query);
          }
        }
      });
    }
    
    const highlightMatch = (text: string, query: string): string => {
      if (!query.trim()) return text;
      
      try {
        const regex = new RegExp(`(${query.trim().replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
        return text.replace(regex, '<span class="search-highlight">$1</span>');
      } catch (e) {
        return text;
      }
    };
    
    const displayResults = (results: any[], query: string) => {
      searchResultsListEl.innerHTML = '';
      
      if (results.length === 0) {
        initialMessageEl.classList.add('hidden');
        searchLoadingEl.classList.add('hidden');
        searchResultsListEl.classList.add('hidden');
        searchNoResultsEl.classList.remove('hidden');
        return;
      }
      
      initialMessageEl.classList.add('hidden');
      searchLoadingEl.classList.add('hidden');
      searchNoResultsEl.classList.add('hidden');
      searchResultsListEl.classList.remove('hidden');
      
      results.forEach(hit => {
        const resultItem = document.createElement('div');
        resultItem.className = 'search-result-item';
        
        const title = highlightMatch(hit.title || 'Untitled', query);
        const description = hit.description 
          ? highlightMatch(hit.description, query)
          : hit.excerpt 
            ? highlightMatch(hit.excerpt, query)
            : '';
        
        // Tags display if available
        let tagsHTML = '';
        if (hit.tags && hit.tags.length > 0) {
          tagsHTML = `
            <div class="search-result-tags">
              ${hit.tags.map((tag: string) => `
                <span class="search-result-tag">${tag}</span>
              `).join('')}
            </div>
          `;
        }
        
        resultItem.innerHTML = `
          <a href="${hit.slug}" class="block">
            <div class="search-result-title">${title}</div>
            ${description ? `<div class="search-result-description">${description}</div>` : ''}
            <div class="search-result-path">${hit.slug}</div>
            ${tagsHTML}
          </a>
        `;
        
        searchResultsListEl.appendChild(resultItem);
      });
    };
    
    async function performSearch(query: string) {
      if (!query.trim()) {
        initialMessageEl.classList.remove('hidden');
        searchLoadingEl.classList.add('hidden');
        searchResultsListEl.classList.add('hidden');
        searchNoResultsEl.classList.add('hidden');
        return;
      }
      
      initialMessageEl.classList.add('hidden');
      searchLoadingEl.classList.remove('hidden');
      searchResultsListEl.classList.add('hidden');
      searchNoResultsEl.classList.add('hidden');
      
      try {
        const { hits } = await index.search(query, {
          attributesToRetrieve: ['title', 'description', 'excerpt', 'slug', 'tags'],
          hitsPerPage: 20
        });
        
        displayResults(hits, query);
      } catch (error) {
        console.error('Error searching:', error);
        searchLoadingEl.classList.add('hidden');
        searchNoResultsEl.classList.remove('hidden');
      }
    }
  });
</script>